==== ZML ====

-- Immediate --


-- Functional --

  [ ] Special tag module for HTML
    [ ] Call ZSS for zss files
    [ ] ZSS cullinator (pass it the AST?  Visa versa?)
    [ ] ZSS inline
    [ ] ZSS images working as expected
    [ ] ZML images loaded, preprocessed, output
    [ ] Namespace & language in html tag
    [ ] Copy TODO bugs etc. into this list
  [ ] Fix space issues for inline tags (honor spaces before, inside, and after)
  [ ] Special tag module for include
  [ ] Special tag module for include_layout
    [ ] Ability to include multiple chunks in different parts / complex layout?
  [ ] In-document includes (mixins)
  [ ] Simple string expansion macros (pre and post parsing?)
  [ ] Templates compiled for very fast erlang execution
  [~] Updated readme

-- Polish / Bugs --

  [ ] Say you have a big paragraph of text over multiple lines, and you have lots
	  of :strong ...; stuff like that embedded all over, and your text editor
	  puts one of those :strong ...; things at the beginning of the line- will
	  the compiler choke on the ';'?  It needs to not choke, and needs to, in
	  that case, not allow indented children either.

-- Future --

  [ ] Tabs for textmate bundle
  [ ] Parse inline ZSS correctly?
  [ ] Beginning of some evolving ZML coding conventions
  [ ] Unit tests
  [ ] Analyze class attributes and decide to change them to ID's- change CSS
	  accordingly.
  [ ] Alphabetize attributes on render
  [ ] Figure out some way to cache results of "closure" because it's sooo
      slowww... (used by html special) (for example, alphabetized md5sums of
      input files corresponding to an output compressed).
  [ ] Replace closure with an erlang based transformation engine so that we
      have some real speed and can even compile on the fly.
  [ ] Warning when tags are in unoptimal order (js then stylesheet, for
      example).

==== ZSS ====

-- Immediate --

  [~] Parser sets variables appropriately and removes token - including specialized typing
  [ ] Correctly pull in assignments without regard to inner commas etc.
  [ ] Instant expression evaluation on reading attributes so vars can be reassigned etc.

-- Functional --

  [ ] Includes - syntax, parsing and processing
  [ ] Figure out ZML syntax for print vs screen etc.
  [ ] Pull in external images, process, and put in the right place etc.
  [ ] Post-processing (combinine like-selectors at least)
  [ ] Final rendering
  [ ] Syntax for no-delete
  [ ] Vim syntax file
  [ ] Textmate syntax file
  [ ] Readme file for it

-- Polish / Bugs --

-- Future --

  [ ] Beginning of some evolving ZSS coding conventions (loosely based on
      http://www.nodewave.com/download/document/css-coding-style-conventions--standards-guidelines-rules.pdf )
  [ ] Alphabetize key-value pairs on render
  [ ] Remove redundant qualifiers (with notice?)
  [ ] More from here: http://code.google.com/speed/page-speed/docs/rendering.html
  [ ] Automatically figure out which CSS rules are irrelevant and exclude them
	  (flag to disallow this somehow).  (Would need sample html that would be
	  received from servers / generated by JS, etc.)
  [ ] Apply other CSS optimization techniques- safe equivalents that are rendered
	  faster or more broadly.
  [ ] Looks for rules that always override earlier rules (such as a:hover
      details etc.)
  [ ] Warn on unknown css attributes or tags
  [ ] Re-output input colorized with what rules are activated by the ZML
  [ ] Tabs for textmate bundle

==== ZWAPP ====

-- Immediate --

-- Functional --
  [ ] Clump views to compile- helping w/ ZSS optimization etc.
  [ ] Develop dependency chart for watching files when clump-compiled
  [ ] Auto reload compilation for development
  [ ] Sample data compilation / autocompile
  [ ] gen_server / batcher / zwapp-minimal
  [ ] Hot code swapping / upgrading mechanisms

-- Polish / Bugs --

-- Future --


