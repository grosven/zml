===== Immediate / Next Action =====
-- ZML --
  [ ] Special tag module for HTML
    [ ] Call ZSS for zss files
    [ ] Figure out syntax for print vs screen (etc.?) ZSS

-- ZSS --
  [ ] Touch up screen.zss file and make sure it compiles to AST correctly
  [ ] Pull in external images, process, and put in the right place etc.
  [ ] Post-processing (combinine like-selectors at least)
  [ ] Final rendering
  [ ] Textmate syntax file
  [ ] Readme file for it

-- ZWAPP --


===== Functional / To Implement =====
-- ZML --
  [ ] Special tag module for HTML
    [ ] ZSS cullinator (pass it the AST?  Visa versa?)
    [ ] ZSS inline
    [ ] ZSS images working as expected
    [ ] ZML images loaded, preprocessed, output
    [ ] Namespace & language in html tag
    [ ] Copy TODO bugs etc. into this list
  [ ] Fix space issues for inline tags (honor spaces before, inside, and after)
  [ ] Special tag module for include
  [ ] Special tag module for include_layout
    [ ] Ability to include multiple chunks in different parts / complex layout?
  [ ] In-document includes (mixins)
  [ ] Simple string expansion macros (pre and post parsing?)
  [ ] Templates compiled for very fast erlang execution
  [~] Updated readme

-- ZSS --

-- ZWAPP --
  [ ] Clump views to compile- helping w/ ZSS optimization etc.
  [ ] Develop dependency chart for watching files when clump-compiled
  [ ] Auto reload compilation for development
  [ ] Sample data compilation / autocompile
  [ ] gen_server / batcher / zwapp-minimal
  [ ] Hot code swapping / upgrading mechanisms


===== Polish / Bugs / Future =====
-- ZML --
  [ ] Say you have a big paragraph of text over multiple lines, and you have lots
      of :strong ...; stuff like that embedded all over, and your text editor
      puts one of those :strong ...; things at the beginning of the line- will
      the compiler choke on the ';'?  It needs to not choke, and needs to, in
      that case, not allow indented children either.
  [ ] Tabs for textmate bundle
  [ ] Parse inline ZSS correctly?
  [ ] Beginning of some evolving ZML coding conventions
  [ ] Unit tests
  [ ] Analyze class attributes and decide to change them to ID's- change CSS
      accordingly.
  [ ] Alphabetize attributes on render
  [ ] Figure out some way to cache results of "closure" because it's sooo
      slowww... (used by html special) (for example, alphabetized md5sums of
      input files corresponding to an output compressed).
  [ ] Replace closure with an erlang based transformation engine so that we
      have some real speed and can even compile on the fly.
  [ ] Warning when tags are in unoptimal order (js then stylesheet, for
      example).

-- ZSS --
  [ ] Syntax for no-delete
  [ ] Boolean expressions / blocks / or ternary expression
  [ ] Right now it cuts color values every time it does an operation- maybe it
      makes more sense to cut them only when they're being rendered finally.
  [ ] Get rgb(), hsl(), rgba()... stuff working
  [ ] VIM syntax - inline comments after attribute text (currently as string highlight)
  [ ] VIM syntax - more realistic highlight links
  [ ] Lazy mixin variable evaluation
  [ ] Beginning of some evolving ZSS coding conventions (loosely based on
      http://www.nodewave.com/download/document/css-coding-style-conventions--standards-guidelines-rules.pdf )
  [ ] Alphabetize key-value pairs on render
  [ ] Remove redundant qualifiers (with notice?)
  [ ] More from here: http://code.google.com/speed/page-speed/docs/rendering.html
  [ ] Automatically figure out which CSS rules are irrelevant and exclude them
	  (flag to disallow this somehow).  (Would need sample html that would be
	  received from servers / generated by JS, etc.)
  [ ] Apply other CSS optimization techniques- safe equivalents that are rendered
	  faster or more broadly.
  [ ] Looks for rules that always override earlier rules (such as a:hover
      details etc.)
  [ ] Warn on unknown css attributes or tags
  [ ] Re-output input colorized with what rules are activated by the ZML
  [ ] Tabs for textmate bundle
  [ ] Real variable vs. string interpolation
  [ ] All expressions evaluating correctly
    [ ] Fix variable vs string
    [ ] string/bool x number
    [ ] string/bool x string
  [ ] A way to preserve order somehow when needed?
  [ ] Include files
    [ ] Search correct paths (project, like zml, script, etc.)
    [ ] Append extension if necessary
    [ ] Syntax highlighting for includes
    [ ] Includes (and therefore normals) need to have a flag that allows attribute children
    [ ] Error messages need to emit the script name as well as the line number

-- ZWAPP --

